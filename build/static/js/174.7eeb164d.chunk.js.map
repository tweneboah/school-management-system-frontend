{"version":3,"sources":["pages/reset/Reset.js","utils.js"],"names":["Login","history","id","useParams","useState","confirmpass","setconfirmpass","password","setpassword","loading","setloading","useForm","register","handleSubmit","errors","className","md","name","value","ref","required","minLength","onChange","e","target","type","placeholder","validate","to","xs","disabled","onClick","axios","post","token","then","res","data","error","errorAlert","user","handleLogin","push","catch","err","console","log","color","role","aria-hidden","successAlert","text","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","getYearsList","length","min","Date","getFullYear","max","arr","index","yearArray","currentCurrency","getYearsPast","getEmailPattern","getID","Math","random","toString","substr","getTrimString","str","getCapitalize","string","charAt","toUpperCase","substring","getIntial","slice","getImgSrc","src","timeStamp","time","moment","format","subtract","combineDateAndTime","date","year","month","getMonth","day","getDate","separateDateandTime","d","getHours","getMinutes"],"mappings":"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","file":"static/js/174.7eeb164d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport axios from \"../../store/axios\";\nimport { useForm } from \"react-hook-form\";\nimport { errorAlert } from \"../../utils\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { handleLogin } from \"../../store/apiCall\";\n\nconst Login = ({ history }) => {\n  const { id } = useParams();\n  const [confirmpass, setconfirmpass] = useState(\"\");\n  const [password, setpassword] = useState(\"\");\n  const [loading, setloading] = useState(false);\n  const { register, handleSubmit, errors } = useForm();\n\n  const handleSignin = () => {\n    setloading(true);\n    axios\n      .post(\"/resetpassword\", { token: id, password })\n      .then((res) => {\n        const { data } = res;\n        setloading(false);\n        if (data.error) {\n          errorAlert(data.error);\n          return 0;\n        }\n        const user = data?.user;\n        handleLogin(user);\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n        setloading(false);\n        errorAlert(\"Connection  error try again later\");\n      });\n  };\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Reset Password</h1>\n                    <p className=\"text-muted\">Enter your new password</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <input\n                        value={password}\n                        className=\"form-control  col-6\"\n                        name=\"password\"\n                        ref={register({ required: true, minLength: 6 })}\n                        onChange={(e) => setpassword(e.target.value)}\n                        type=\"password\"\n                        required\n                        placeholder=\"Enter Password\"\n                      />\n                      <br />\n                    </CInputGroup>\n                    {errors.password && (\n                      <span className=\" form-error text-danger mb-2\">\n                        Password is required with at least 6 characters\n                      </span>\n                    )}\n                    <CInputGroup className=\"mb-2\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <input\n                        type=\"password\"\n                        className=\"form-control  col-6\"\n                        placeholder=\"Confirm password\"\n                        name=\"confirmpass\"\n                        ref={register({\n                          required: true,\n                          validate: (value) => value === password,\n                        })}\n                        value={confirmpass}\n                        required\n                        onChange={(e) => setconfirmpass(e.target.value)}\n                      />\n                      <br />\n                    </CInputGroup>\n                    {errors.confirmpass && (\n                      <span className=\"form-error text-danger mb-2\">\n                        Please confirm password. It should match password\n                      </span>\n                    )}\n                    <CRow className=\"mb-3\">\n                      <Link to=\"/password/forget\">Send email Resend Code </Link>\n                    </CRow>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton\n                          disabled={loading}\n                          onClick={handleSubmit(handleSignin)}\n                          type=\"submit\"\n                          color=\"primary\"\n                          className=\"px-4\"\n                        >\n                          {loading ? (\n                            <>\n                              <span\n                                className=\"spinner-border spinner-border-sm\"\n                                role=\"status\"\n                                aria-hidden=\"true\"\n                              ></span>\n                              <span className=\"visually-hidden\">\n                                Loading...\n                              </span>\n                            </>\n                          ) : (\n                            <>Submit</>\n                          )}\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n","//import {API_BASE_URL} from './api'\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\n\nexport const successAlert = text => {\n  return toast.success(text, {\n    position: 'top-right',\n    autoClose: false,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nexport const errorAlert = text => {\n  return toast.error(text, {\n    position: 'top-right',\n    autoClose: false,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nexport const getYearsList = length => {\n  const min = new Date().getFullYear();\n  const max = min + length;\n\n  const yearArray = () => {\n    let arr = [];\n    for (let index = min; index < max; index++) {\n      arr.push(index);\n    }\n    return arr;\n  };\n\n  return yearArray();\n};\n\nexport const currentCurrency = () => {\n  return 'GH¢';\n};\n\nexport const getYearsPast = length => {\n  const max = new Date().getFullYear();\n  const min = max - length;\n\n  const yearArray = () => {\n    let arr = [];\n    for (let index = max; index > min; index--) {\n      arr.push(index);\n    }\n    return arr;\n  };\n\n  return yearArray();\n};\n\nexport const getEmailPattern = () =>\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const getID = function () {\n  return Math.random().toString(36).substr(2, 9);\n};\n\nexport const getTrimString = (str, length) => {\n  if (str?.length > length) {\n    return str.substr(0, length) + '...';\n  }\n  return str;\n};\n\nexport const getCapitalize = string => {\n  if (string) {\n    return string.charAt(0).toUpperCase() + string.substring(1);\n  } else return null;\n};\n\nexport const getLowerCase = string => {\n  if (string) {\n    return string.toLowerCase();\n  } else return null;\n};\n\nexport const getIntial = name => {\n  if (name) {\n    return name.slice(0, 1).toUpperCase();\n  }\n  return null;\n};\n\n// export const getImgSrc = src => {\n//   return `http://localhost:5000/${src}`;\n// };\n\nexport const getImgSrc = src => {\n  return `https://inovotek-sms.herokuapp.com/${src}`;\n};\n\nexport const timeStamp = time => {\n  if (moment().format('dddd') === moment(time).format('dddd')) {\n    return `Today ${moment(time)?.format('h:mm a')}`;\n  } else if (\n    moment().subtract(1, 'days').format('dddd') === moment(time)?.format('dddd')\n  ) {\n    return `Yesterday ${moment(time)?.format('h:mm a')}`;\n  } else {\n    return moment(time)?.format('dddd,  h:mm a');\n  }\n};\n\nexport const combineDateAndTime = function (date, time) {\n  console.log(time, 'tieme');\n  // let d = new Date();\n  // time =   d.setTime(time);\n\n  date = new Date(date);\n  console.log(date, 'date');\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1; // Jan is 0, dec is 11\n  var day = date.getDate();\n  var dateString = '' + year + '-' + month + '-' + day;\n  var combined = new Date(dateString + ' ' + time);\n\n  return combined;\n};\n\nexport const separateDateandTime = date => {\n  const d = new Date(date);\n\n  var year = d.getFullYear();\n  var month = d.getMonth() + 1; // Jan is 0, dec is 11\n  var da = d.getDate();\n  var hours = d.getHours();\n  var minutes = d.getMinutes();\n  var day = '' + year + '-' + month + '-' + da;\n  var time = '' + hours + ': ' + minutes;\n\n  return { day, time };\n};\n\nexport const sortArray = arr => {\n  arr.sort(function (x, y) {\n    return x.updatedAt - y.updatedAt;\n  });\n};\n"],"sourceRoot":""}