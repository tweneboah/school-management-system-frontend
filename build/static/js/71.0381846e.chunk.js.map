{"version":3,"sources":["AdminComponents/finance/payeCalculator/Calculator.js"],"names":["Calculator","useForm","register","handleSubmit","errors","useState","salary","setsalary","allowance","setallowance","ssnit","setssnit","loading","setloading","tax","settax","nettax","setnettax","balanceBeforeTax","setbalanceBeforeTax","ssnitAmount","setssnitAmount","action","className","htmlFor","value","onChange","e","target","type","ref","required","name","id","checked","onClick","total","Number","ssnitBalance","balance","taxAmount","net","toFixed","role","aria-hidden","class","scope","displayType","thousandSeparator","prefix","currentCurrency"],"mappings":"+LAsKeA,UAjKf,WACE,MAA2CC,cAAnCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,OAChC,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAAsBR,mBAAS,MAA/B,mBAAOS,EAAP,KAAYC,EAAZ,KACA,EAA4BV,mBAAS,IAArC,mBAAOW,EAAP,KAAeC,EAAf,KACA,EAAgDZ,mBAAS,IAAzD,mBAAOa,EAAP,KAAyBC,EAAzB,KACA,EAAsCd,mBAAS,IAA/C,mBAAOe,EAAP,KAAoBC,EAApB,KAgBA,OACE,gCACE,iDACA,uBAAMC,OAAO,GAAGC,UAAU,mCAA1B,UACE,sBAAKA,UAAU,QAAf,UACE,uBAAOC,QAAQ,OAAOD,UAAU,kBAAhC,oBAGA,uBACEE,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAAUoB,EAAEC,OAAOH,QACpCI,KAAK,SACLC,IAAK5B,EAAS,CAAE6B,UAAU,IAC1BR,UAAU,eACVS,KAAK,SAEN5B,EAAO4B,MACN,sBAAMT,UAAU,+BAAhB,uCAKJ,sBAAKA,UAAU,QAAf,UACE,uBAAOC,QAAQ,OAAOD,UAAU,kBAAhC,uBAGA,uBACEE,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAakB,EAAEC,OAAOH,QACvCI,KAAK,SACLC,IAAK5B,EAAS,CAAE6B,UAAU,IAC1BR,UAAU,eACVS,KAAK,SAEN5B,EAAO4B,MACN,sBAAMT,UAAU,+BAAhB,uCAKJ,sBAAKA,UAAU,0BAAf,UACE,uBAAOC,QAAQ,OAAOD,UAAU,aAAhC,yCAGA,qBAAKA,UAAU,yBAAf,SACE,uBACEA,UAAU,mBACVM,KAAK,WACLH,SAAU,kBAAMf,GAAUD,IAC1BuB,GAAG,yBACHC,QAASxB,SAIf,8BACE,yBACEyB,QAAShC,GAtEK,WACtBU,GAAW,GACX,IAAIuB,EAAQC,OAAO/B,GAAU+B,OAAO7B,GAChC8B,EAAe,KAAQF,EACvBG,EAAU7B,EAAQ0B,EAAQE,EAAeF,EACzCI,EAAY,GAAMD,EAClBE,EAAMF,EAAUC,EAEpBrB,EAAoBiB,EAAMM,QAAQ,IAClCrB,EAAeiB,EAAaI,QAAQ,IACpC3B,EAAOyB,EAAUE,QAAQ,IACzBzB,EAAUwB,EAAIC,QAAQ,IACtB7B,GAAW,MA2DHU,UAAU,gBAFZ,UAIGX,GACC,sBACEW,UAAU,mCACVoB,KAAK,SACLC,cAAY,SARlB,oBAgBH5B,GACC,sBAAKO,UAAU,mCAAf,UACE,yCACA,wBAAOsB,MAAM,uBAAb,UACE,gCACE,+BACE,oBAAIC,MAAM,QACV,oBAAIA,MAAM,MAAV,yBAGJ,kCACE,+BACE,kDACA,6BACE,cAAC,IAAD,CACErB,MAAOP,EACP6B,YAAa,OACbC,mBAAmB,EACnBC,OAAQC,qBAIbxC,GACC,+BACE,+CACA,6BACE,cAAC,IAAD,CACEe,MAAOL,EACP2B,YAAa,OACbC,mBAAmB,EACnBC,OAAQC,qBAKhB,+BACE,sCACA,6BACE,cAAC,IAAD,CACEzB,MAAOX,EACPiC,YAAa,OACbC,mBAAmB,EACnBC,OAAQC,qBAId,+BACE,mDACA,6BACE,cAAC,IAAD,CACEzB,MAAOT,EACP+B,YAAa,OACbC,mBAAmB,EACnBC,OAAQC","file":"static/js/71.0381846e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { currentCurrency } from \"../../../utils\";\nimport NumberFormat from \"react-number-format\";\n\nfunction Calculator() {\n  const { register, handleSubmit, errors } = useForm();\n  const [salary, setsalary] = useState(\"\");\n  const [allowance, setallowance] = useState(\"\");\n  const [ssnit, setssnit] = useState(false);\n  const [loading, setloading] = useState(false);\n  const [tax, settax] = useState(null);\n  const [nettax, setnettax] = useState(\"\");\n  const [balanceBeforeTax, setbalanceBeforeTax] = useState(\"\");\n  const [ssnitAmount, setssnitAmount] = useState(\"\");\n\n  const handleCalculate = () => {\n    setloading(true);\n    let total = Number(salary) + Number(allowance);\n    let ssnitBalance = 0.135 * total;\n    let balance = ssnit ? total - ssnitBalance : total;\n    let taxAmount = 0.2 * balance;\n    let net = balance - taxAmount;\n\n    setbalanceBeforeTax(total.toFixed(2));\n    setssnitAmount(ssnitBalance.toFixed(2));\n    settax(taxAmount.toFixed(2));\n    setnettax(net.toFixed(2));\n    setloading(false);\n  };\n  return (\n    <div>\n      <h3>Paye Calculator</h3>\n      <form action=\"\" className=\"content__container col-md-9 mb-3\">\n        <div className=\" mb-3\">\n          <label htmlFor=\"name\" className=\" col-form-label\">\n            Salary\n          </label>\n          <input\n            value={salary}\n            onChange={(e) => setsalary(e.target.value)}\n            type=\"number\"\n            ref={register({ required: true })}\n            className=\"form-control\"\n            name=\"name\"\n          />\n          {errors.name && (\n            <span className=\" form-error text-danger mb-2\">\n              This field is required\n            </span>\n          )}\n        </div>\n        <div className=\" mb-3\">\n          <label htmlFor=\"name\" className=\" col-form-label\">\n            Allowance\n          </label>\n          <input\n            value={allowance}\n            onChange={(e) => setallowance(e.target.value)}\n            type=\"number\"\n            ref={register({ required: true })}\n            className=\"form-control\"\n            name=\"name\"\n          />\n          {errors.name && (\n            <span className=\" form-error text-danger mb-2\">\n              This field is required\n            </span>\n          )}\n        </div>\n        <div className=\"col-xs-12 col-sm-6 mb-3\">\n          <label htmlFor=\"name\" className=\"form-label\">\n            Includes SSNIT Contribution\n          </label>\n          <div className=\"form-check form-switch\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              onChange={() => setssnit(!ssnit)}\n              id=\"flexSwitchCheckChecked\"\n              checked={ssnit}\n            />\n          </div>\n        </div>\n        <div>\n          <button\n            onClick={handleSubmit(handleCalculate)}\n            className=\"btn blue__btn\"\n          >\n            {loading && (\n              <span\n                className=\"spinner-border spinner-border-sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              ></span>\n            )}\n            Calculate\n          </button>\n        </div>\n      </form>\n\n      {nettax && (\n        <div className=\"content__container col-md-9 mb-3\">\n          <h3>Results</h3>\n          <table class=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\">Amount</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Total Before Tax</td>\n                <td>\n                  <NumberFormat\n                    value={balanceBeforeTax}\n                    displayType={\"text\"}\n                    thousandSeparator={true}\n                    prefix={currentCurrency()}\n                  />\n                </td>\n              </tr>\n              {ssnit && (\n                <tr>\n                  <td>SSNIT Amount </td>\n                  <td>\n                    <NumberFormat\n                      value={ssnitAmount}\n                      displayType={\"text\"}\n                      thousandSeparator={true}\n                      prefix={currentCurrency()}\n                    />\n                  </td>\n                </tr>\n              )}\n              <tr>\n                <td>Tax </td>\n                <td>\n                  <NumberFormat\n                    value={tax}\n                    displayType={\"text\"}\n                    thousandSeparator={true}\n                    prefix={currentCurrency()}\n                  />\n                </td>\n              </tr>\n              <tr>\n                <td>Balance After Tax</td>\n                <td>\n                  <NumberFormat\n                    value={nettax}\n                    displayType={\"text\"}\n                    thousandSeparator={true}\n                    prefix={currentCurrency()}\n                  />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Calculator;\n"],"sourceRoot":""}