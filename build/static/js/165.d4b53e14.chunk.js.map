{"version":3,"sources":["AdminComponents/academics/notes/NoteForm.js","AdminComponents/academics/notes/EditNote.js"],"names":["NoteForm","props","useForm","register","handleSubmit","errors","useState","classes","setclasses","courses","setcourses","useEffect","axios","get","then","res","console","log","data","classID","setclass","subject","setsubject","topic","settopic","loading","handleAdd","handleReset","isEdit","role","setfile","notes","setnotes","className","action","value","onChange","e","target","name","selected","hidden","length","map","classCode","disabled","code","ref","required","type","rows","id","accept","file","onClick","aria-hidden","EditNote","setclassID","setloading","useParams","handleResetNote","doc","courseID","fileData","FormData","append","post","path","put","response","error","errorAlert","successAlert","catch","err"],"mappings":"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","file":"static/js/165.d4b53e14.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport axios from \"../../../store/axios\";\n\nfunction NoteForm(props) {\n  const { register, handleSubmit, errors } = useForm();\n  const [classes, setclasses] = useState([]);\n  const [courses, setcourses] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"/classes\").then((res) => {\n      console.log(res.data);\n      setclasses(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    axios.get(\"/courses\").then((res) => {\n      console.log(res.data);\n      setcourses(res.data);\n    });\n  }, []);\n\n  let {\n    classID,\n    setclass,\n    subject,\n    setsubject,\n    topic,\n    settopic,\n    loading,\n    handleAdd,\n    handleReset,\n    isEdit,\n    role,\n    setfile,\n    notes,\n    setnotes,\n  } = props;\n\n  return (\n    <form className=\"row g-3\" action=\"\">\n      {role === \"admin\" && (\n        <>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Select Class</label>\n            <select\n              value={classID}\n              onChange={(e) => setclass(e.target.value)}\n              name=\"class\"\n              className=\"form-select\"\n            >\n              <option selected hidden>\n                Choose...\n              </option>\n              {classes.length > 0 ? (\n                classes.map((e) => (\n                  <option value={e.classCode} key={e.classCode}>\n                    {e.name}\n                  </option>\n                ))\n              ) : (\n                <option disabled>No classes available yet</option>\n              )}\n            </select>\n          </div>\n          <div className=\"col-md-6\">\n            <label className=\"form-label\">Select Subject</label>\n            <select\n              value={subject}\n              onChange={(e) => setsubject(e.target.value)}\n              name=\"class\"\n              className=\"form-select\"\n            >\n              <option selected hidden>\n                Choose...\n              </option>\n              {courses.length > 0 ? (\n                courses.map((e) => (\n                  <option value={e.code} key={e.code}>\n                    {e.name}\n                  </option>\n                ))\n              ) : (\n                <option disabled>No courses available yet</option>\n              )}\n            </select>\n          </div>\n        </>\n      )}\n\n      <div className=\"col-12\">\n        <label className=\"form-label\">Topic</label>\n        <input\n          value={topic}\n          ref={register({ required: true })}\n          onChange={(e) => settopic(e.target.value)}\n          type=\"text\"\n          className=\"form-control\"\n          name=\"topic\"\n        />\n        {errors.topic && (\n          <span className=\" form-error text-danger mb-2\">\n            This field is required\n          </span>\n        )}\n      </div>\n      <div className=\"col-12\">\n        <label className=\"form-label\">Notes</label>\n        <textarea\n          value={notes}\n          onChange={(e) => setnotes(e.target.value)}\n          rows={5}\n          className=\"form-control\"\n          id=\"topic\"\n        ></textarea>\n      </div>\n      <div className=\"col-12\">\n        <label className=\"form-label\">Upload file</label>\n        <input\n          type=\"file\"\n          accept=\".jpg,.jpeg,.png,.doc,.docx,.pdf, .zip\"\n          ref={register({ required: true })}\n          onChange={(e) => setfile(e)}\n          className=\"form-control\"\n          name=\"file\"\n        />\n        {errors.file && (\n          <span className=\" form-error text-danger mb-2\">\n            Please select file\n          </span>\n        )}\n      </div>\n      <div className=\"col-12\">\n        <button\n          onClick={handleSubmit(handleAdd)}\n          className=\"btn blue__btn mr-3\"\n        >\n          {loading && (\n            <span\n              className=\"spinner-border spinner-border-sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            ></span>\n          )}\n          {isEdit ? \"Save Changes\" : \"Add\"}\n        </button>\n        <button onClick={handleSubmit(handleReset)} className=\"btn orange__btn\">\n          Reset\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default NoteForm;\n","import React, {useState, useEffect} from 'react'\nimport EditForm from './NoteForm';\nimport axios from '../../../store/axios';\nimport {useParams} from 'react-router-dom';\nimport {errorAlert, successAlert} from '../../../utils'\n\nfunction EditNote() {\n    const [classID, setclassID] = useState(\"\");\n    const [subject, setsubject] = useState(\"\");\n    const [topic, settopic] = useState(\"\")\n    const [notes, setnotes] = useState(\"\")\n    const [file, setfile] = useState(\"\")\n    const [loading, setloading] = useState(false);\n    const {id} = useParams();\n\n    const handleResetNote = () => {\n        setclassID(\"\");\n        setsubject(\"\");\n        settopic(\"\")\n        setnotes(\"\");\n        setfile(\"\");\n   }\n   useEffect(() => {\n       axios.get(`/notes/${id}`).then(res => {\n           let data =res.data.doc\n           setclassID(data?.classID);\n           setsubject(data?.courseID);\n           settopic(data?.topic);\n           setfile(data?.file);\n           setnotes(data?.notes)\n       })\n   }, [id])\n\n\n   const handleEditNote = () => {\n    setloading(true)\n    const fileData = new FormData();\n        fileData.append(\"photo\", file);\n        axios.post('/upload', fileData, {}).then((res) => {\n          const path= res.data.path;\n          console.log(path) \n          axios.put(`/notes/update/${id}`, {\n              topic,\n              classID,\n              courseID: subject,\n              notes,\n              file: path\n          }).then(response => {\n            console.log(response.data)\n              if(response.data.error){\n                errorAlert(res.data.error);\n                setloading(false);\n                return 0;\n              }\n              successAlert(\"notes successfully added\");\n              setloading(false);\n              handleResetNote();  \n          })\n        })\n    .catch(err => {\n        setloading(false);\n        errorAlert(\"sorry something went error, try again later\")\n    })\n\n   }\n\n    return (\n        <div className=\"content__container mb-5\">\n           <h3>Add New Notes</h3>\n           <EditForm \n            classID={classID}\n            setclass={setclassID} \n            subject={subject} \n            setsubject={setsubject} \n            topic={topic} \n            settopic={settopic} \n            file={file} \n            handleAdd= {handleEditNote}\n            handleReset ={handleResetNote}\n            loading={loading}\n            isEdit={true}\n            setfile={setfile} \n            notes={notes}\n            setnotes={setnotes}\n           />\n        </div>\n    )\n}\n\nexport default EditNote\n"],"sourceRoot":""}