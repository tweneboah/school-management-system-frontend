{"version":3,"sources":["AdminComponents/Profile/academicsReports/AcademicTranscripts.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","components/tables/ExcelExport.js"],"names":["AcademicTranscripts","years","useSelector","selectYearGroup","current","selectacademicYear","useState","currentTerm","from","setfrom","currentYear","to","setto","studentID","setstudentID","loading","setloading","show","setshow","school","setschool","data","setdata","error","seterror","studentDetails","setstudentDetails","useEffect","axios","get","then","res","getTotal","exams","work","Number","getGrade","classwork","exam","num","getInterpretation","action","className","name","value","onChange","e","target","id","defaultValue","hidden","length","map","year","_id","disabled","onClick","preventDefault","errorAlert","a","student","console","log","docs","type","role","aria-hidden","fullName","motto","userID","surname","scope","course","classWorkPercentage","examPercentage","position","colSpan","window","print","columns","btn","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ExcelExport","element","col","label"],"mappings":"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","file":"static/js/100.741df8c3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"../../../store/axios\";\nimport { errorAlert } from \"../../../utils\";\nimport Excel from \"../../../components/tables/ExcelExport\";\nimport {\n  selectYearGroup,\n  selectacademicYear,\n} from \"../../../store/slices/schoolSlice\";\n\nfunction AcademicTranscripts() {\n  const years = useSelector(selectYearGroup);\n  const current = useSelector(selectacademicYear);\n  const [from, setfrom] = useState(current.currentTerm);\n  const [to, setto] = useState(current.currentYear);\n  const [studentID, setstudentID] = useState(\"\");\n  const [loading, setloading] = useState(\"\");\n  const [show, setshow] = useState(false);\n  const [school, setschool] = useState({});\n  const [data, setdata] = useState([]);\n  const [error, seterror] = useState(false);\n\n  const [studentDetails, setstudentDetails] = useState({});\n\n  useEffect(() => {\n    axios.get(\"/school\").then((res) => {\n      setschool(res.data);\n    });\n  }, []);\n\n  const handleSearch = (e) => {\n    seterror(false);\n    e.preventDefault();\n    if (!studentID) {\n      return errorAlert(\"select student\");\n    }\n    setloading(true);\n    axios.get(`sba/student/${studentID}/${to}/${from}`).then(async (res) => {\n      let student = await axios.get(`/students/student/${studentID}`);\n      console.log(student);\n      setloading(false);\n      setshow(true);\n      if (student.data.error) {\n        return seterror(true);\n      }\n      setstudentDetails(student.data.student);\n      setloading(false);\n\n      if (res.data.error) {\n        return errorAlert(\"Student does not exist\");\n      }\n      setdata(res.data.docs);\n    });\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const columns = [\n    { id: \"subject\", name: \"Subject\" },\n    { id: \"term\", name: \"Term\" },\n    { id: \"mark\", name: \"Mark\" },\n  ];\n\n  const getTotal = (exams, work) => {\n    if (!work && !exams) {\n      return \"-\";\n    }\n    return Number(exams || 0) + Number(work || 0);\n  };\n\n  const getGrade = (classwork, exam) => {\n    if (!classwork && !exam) {\n      return \"-\";\n    }\n    let num = getTotal(classwork, exam);\n    if (num >= 75 && num <= 100) {\n      return \"A1\";\n    } else if (num >= 70 && num <= 74) {\n      return \"B2\";\n    } else if (num >= 65 && num <= 69) {\n      return \"B3\";\n    } else if (num >= 60 && num <= 64) {\n      return \"C4\";\n    } else if (num >= 55 && num <= 59) {\n      return \"C5\";\n    } else if (num >= 50 && num <= 54) {\n      return \"C6\";\n    } else if (num >= 45 && num <= 49) {\n      return \"D7\";\n    } else if (num >= 40 && num <= 44) {\n      return \"E8\";\n    } else if (num >= 0 && num <= 39) {\n      return \"F9\";\n    } else {\n      return null;\n    }\n  };\n\n  const getInterpretation = (classwork, exam) => {\n    if (!classwork && !exam) {\n      return \"-\";\n    }\n    let num = getTotal(classwork, exam);\n    num = Number(num);\n    if (num > 75 && num <= 100) {\n      return \"Excellent\";\n    } else if (num >= 70 && num <= 74) {\n      return \"Vert good\";\n    } else if (num >= 65 && num <= 69) {\n      return \"Good\";\n    } else if (num >= 60 && num <= 64) {\n      return \"Credit\";\n    } else if (num >= 55 && num <= 59) {\n      return \"Credit\";\n    } else if (num >= 50 && num <= 54) {\n      return \"Credit\";\n    } else if (num >= 45 && num <= 49) {\n      return \"Pass\";\n    } else if (num >= 40 && num <= 44) {\n      return \"Pass\";\n    } else if (num >= 0 && num <= 39) {\n      return \"Failure\";\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <div>\n      <h3>Academic Transcript</h3>\n      <form action=\"\" className=\"row content__container\">\n        <div className=\"mb-3 col-sm-4\">\n          <label className=\"form-label\">Term</label>\n          <select\n            name=\"type\"\n            value={from}\n            onChange={(e) => setfrom(e.target.value)}\n            id=\"inputState\"\n            className=\"form-select\"\n          >\n            <option defaultValue hidden>\n              Choose...\n            </option>\n            <option value=\"1\">1st</option>\n            <option value=\"2\">2rd</option>\n            <option value=\"3\">3rd</option>\n          </select>\n        </div>\n        <div className=\"mb-3 col-sm-4\">\n          <label className=\"form-label\">Year</label>\n          <select\n            name=\"type\"\n            value={to}\n            onChange={(e) => setto(e.target.value)}\n            id=\"inputState\"\n            className=\"form-select\"\n          >\n            <option defaultValue hidden>\n              Choose...\n            </option>\n            {years.length > 0 ? (\n              years.map((e) => (\n                <option key={e._id} value={e.year}>\n                  {e.year}\n                </option>\n              ))\n            ) : (\n              <option disabled>No data yet</option>\n            )}\n          </select>\n        </div>\n        <div className=\"mb-3 col-sm-4\">\n          <label className=\"form-label\">Student ID</label>\n          <input\n            value={studentID}\n            onChange={(e) => setstudentID(e.target.value)}\n            className=\"form-control\"\n          ></input>\n        </div>\n        <div className=\"mb-3\">\n          <button\n            onClick={handleSearch}\n            disabled={loading}\n            type=\"submit\"\n            className=\"btn blue__btn\"\n          >\n            {loading && (\n              <span\n                className=\"spinner-border spinner-border-sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n              ></span>\n            )}\n            Search\n          </button>\n        </div>\n      </form>\n\n      {show && (\n        <div className=\"content__container mt-4\" id=\"section-to-print\">\n          <div className=\"text-center\">\n            <h5>\n              <strong>{school?.fullName}</strong>\n            </h5>\n            <h6>{school?.motto}</h6>\n            <h5 className=\"my-4\">\n              STUDENT TRANSCRIPT FOR {studentDetails?.userID}\n            </h5>\n          </div>\n          {error ? (\n            <div>\n              {\" \"}\n              <h3 className=\"text-center text-danger\">Student Not found</h3>\n            </div>\n          ) : (\n            <>\n              <div className=\"text-center\">\n                <h6>\n                  {studentDetails?.name} {studentDetails?.surname}\n                </h6>\n                <div>\n                  Term {from} - Year {to}\n                </div>\n              </div>\n              <table className=\"table table-bordered\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Subject</th>\n                    <th scope=\"col\">Course Work</th>\n                    <th scope=\"col\">Exam</th>\n                    <th scope=\"col\">Total</th>\n                    <th scope=\"col\">Grade</th>\n                    <th scope=\"col\">Interpretation</th>\n                    <th scope=\"col\">Position</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.length > 0 ? (\n                    data.map((e) => (\n                      <tr>\n                        <th scope=\"row\">{e?.course}</th>\n                        <td>{e.classWorkPercentage || \"-\"}</td>\n                        <td>{e?.examPercentage || \"-\"}</td>\n                        <td>\n                          {getTotal(e?.examPercentage, e.classWorkPercentage)}\n                        </td>\n                        <td>\n                          {getGrade(e?.examPercentage, e.classWorkPercentage)}\n                        </td>\n                        <td>\n                          {getInterpretation(\n                            e?.examPercentage,\n                            e.classWorkPercentage\n                          )}\n                        </td>\n                        <td>{e.position || \"-\"}</td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={3} className=\"text-center\">\n                        No Data\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n              <div className=\"my-3 text-center\">\n                <button onClick={handlePrint} className=\"btn blue__btn mr-2\">\n                  Print\n                </button>\n                <Excel data={data} columns={columns} btn=\"save\" />\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AcademicTranscripts;\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from \"react\";\nimport ReactExport from \"react-export-excel\";\nimport moment from \"moment\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nfunction ExcelExport({ data, btn, name, columns }) {\n  return (\n    <ExcelFile\n      element={<button className=\"btn blue__btn\">{btn || \"Download\"}</button>}\n    >\n      <ExcelSheet data={data} name={name || \"data\"}>\n        {columns.map((col) => (\n          <ExcelColumn key={col.id} label={col.name} value={col.id} />\n        ))}\n      </ExcelSheet>\n    </ExcelFile>\n  );\n}\n\nexport default ExcelExport;\n"],"sourceRoot":""}