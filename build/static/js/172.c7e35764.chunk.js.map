{"version":3,"sources":["pages/forget/ForgetPassword.js","utils.js"],"names":["Login","useState","userId","setuserId","isSend","setisSend","email","setemail","loading","setloading","useForm","register","handleSubmit","errors","className","md","name","value","ref","required","onChange","e","target","type","placeholder","autoComplete","pattern","getEmailPattern","to","xs","disabled","onClick","axios","post","userID","then","res","data","error","console","log","errorAlert","successAlert","catch","err","color","role","aria-hidden","text","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","getYearsList","length","min","Date","getFullYear","max","arr","index","push","yearArray","currentCurrency","getYearsPast","getID","Math","random","toString","substr","getTrimString","str","getCapitalize","string","charAt","toUpperCase","substring","getIntial","slice","getImgSrc","src","timeStamp","time","moment","format","subtract","combineDateAndTime","date","year","month","getMonth","day","getDate","separateDateandTime","d","getHours","getMinutes"],"mappings":"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","file":"static/js/172.c7e35764.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"../../store/axios\";\nimport { useForm } from \"react-hook-form\";\nimport { errorAlert, successAlert, getEmailPattern } from \"../../utils\";\n\nconst Login = () => {\n  const [userId, setuserId] = useState(\"\");\n  const [isSend, setisSend] = useState(false);\n  const [email, setemail] = useState(\"\");\n  const [loading, setloading] = useState(false);\n  const { register, handleSubmit, errors } = useForm();\n\n  const handleSignin = () => {\n    setloading(true);\n    axios\n      .post(\"/forgetpassword\", { userID: userId, email })\n      .then((res) => {\n        const { data } = res;\n        setloading(false);\n        if (data.error) {\n          console.log(data);\n          errorAlert(data.error);\n          return 0;\n        }\n        successAlert(`Email has been send to ${email} `);\n        setisSend(true);\n      })\n      .catch((err) => {\n        console.log(err);\n        setloading(false);\n        errorAlert(\"Connection  error try again later\");\n      });\n  };\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"8\">\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Forget Password</h1>\n                    <p className=\"text-muted\">\n                      Enter your email and you will receive an email to reset\n                      password\n                    </p>\n                    <CInputGroup className=\"mb-2\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-user\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <input\n                        value={userId}\n                        className=\"form-control  col-6\"\n                        name=\"userId\"\n                        ref={register({ required: true })}\n                        onChange={(e) => setuserId(e.target.value)}\n                        type=\"text\"\n                        required\n                        placeholder=\"ID\"\n                        autoComplete=\"username\"\n                      />\n                      <br />\n                    </CInputGroup>\n                    {errors.userId && (\n                      <p className=\"d-flex form-error text-danger mb-2\">\n                        This field is required\n                      </p>\n                    )}\n                    <CInputGroup className=\"mb-2\">\n                      <CInputGroupPrepend>\n                        <CInputGroupText>\n                          <CIcon name=\"cil-lock-locked\" />\n                        </CInputGroupText>\n                      </CInputGroupPrepend>\n                      <input\n                        type=\"email\"\n                        className=\"form-control  col-6\"\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        ref={register({\n                          required: true,\n                          pattern: getEmailPattern(),\n                        })}\n                        value={email}\n                        required\n                        onChange={(e) => setemail(e.target.value)}\n                        autoComplete=\"current-password\"\n                      />\n                      <br />\n                    </CInputGroup>\n                    {errors.email && (\n                      <span className=\"form-error text-danger mb-2\">\n                        Valid email is required\n                      </span>\n                    )}\n                    <p>\n                      {isSend && (\n                        <p>\n                          If you haven't received the email Click resend button\n                          below\n                        </p>\n                      )}\n                    </p>\n                    <CRow>\n                      <CCol className=\"mb-3\">\n                        <Link to=\"/login\">Login in your account</Link>\n                      </CCol>\n                    </CRow>\n                    <CRow>\n                      <CCol xs=\"6\">\n                        <CButton\n                          disabled={loading}\n                          onClick={handleSubmit(handleSignin)}\n                          type=\"submit\"\n                          color=\"primary\"\n                          className=\"px-4\"\n                        >\n                          {loading ? (\n                            <>\n                              <span\n                                className=\"spinner-border spinner-border-sm\"\n                                role=\"status\"\n                                aria-hidden=\"true\"\n                              ></span>\n                              <span className=\"visually-hidden\">\n                                Loading...\n                              </span>\n                            </>\n                          ) : (\n                            <>{isSend ? \"Resend\" : \"Submit\"}</>\n                          )}\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              {/* \n              <CCard\n               \n              > */}\n              {/* <CCardBody className=\"text-center\">\n                  <div>\n                    <img src={logo} alt=\"logo\" />\n                    <h2>Welcome Back</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n                      sed do eiusmod tempor incididunt ut labore et dolore magna\n                      aliqua.\n                    </p>\n                  </div>\n                </CCardBody> */}\n              {/* </CCard> */}\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Login;\n","//import {API_BASE_URL} from './api'\nimport moment from 'moment';\nimport { toast } from 'react-toastify';\n\nexport const successAlert = text => {\n  return toast.success(text, {\n    position: 'top-right',\n    autoClose: false,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nexport const errorAlert = text => {\n  return toast.error(text, {\n    position: 'top-right',\n    autoClose: false,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\nexport const getYearsList = length => {\n  const min = new Date().getFullYear();\n  const max = min + length;\n\n  const yearArray = () => {\n    let arr = [];\n    for (let index = min; index < max; index++) {\n      arr.push(index);\n    }\n    return arr;\n  };\n\n  return yearArray();\n};\n\nexport const currentCurrency = () => {\n  return 'GH¢';\n};\n\nexport const getYearsPast = length => {\n  const max = new Date().getFullYear();\n  const min = max - length;\n\n  const yearArray = () => {\n    let arr = [];\n    for (let index = max; index > min; index--) {\n      arr.push(index);\n    }\n    return arr;\n  };\n\n  return yearArray();\n};\n\nexport const getEmailPattern = () =>\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const getID = function () {\n  return Math.random().toString(36).substr(2, 9);\n};\n\nexport const getTrimString = (str, length) => {\n  if (str.length > length) {\n    console.log(str, length);\n    return str.substr(0, length) + '...';\n  }\n  return str;\n};\n\nexport const getCapitalize = string => {\n  if (string) {\n    return string.charAt(0).toUpperCase() + string.substring(1);\n  } else return null;\n};\n\nexport const getLowerCase = string => {\n  if (string) {\n    return string.toLowerCase();\n  } else return null;\n};\n\nexport const getIntial = name => {\n  if (name) {\n    return name.slice(0, 1).toUpperCase();\n  }\n  return null;\n};\n\nexport const getImgSrc = src => {\n  return `https://inovotek-sms.herokuapp.com/${src}`;\n};\n// export const getImgSrc = src => {\n//   return `http://localhost:5000/${src}`;\n// };\n\nexport const timeStamp = time => {\n  if (moment().format('dddd') === moment(time).format('dddd')) {\n    return `Today ${moment(time)?.format('h:mm a')}`;\n  } else if (\n    moment().subtract(1, 'days').format('dddd') === moment(time)?.format('dddd')\n  ) {\n    return `Yesterday ${moment(time)?.format('h:mm a')}`;\n  } else {\n    return moment(time)?.format('dddd,  h:mm a');\n  }\n};\n\nexport const combineDateAndTime = function (date, time) {\n  console.log(time, 'tieme');\n  // let d = new Date();\n  // time =   d.setTime(time);\n\n  date = new Date(date);\n  console.log(date, 'date');\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1; // Jan is 0, dec is 11\n  var day = date.getDate();\n  var dateString = '' + year + '-' + month + '-' + day;\n  var combined = new Date(dateString + ' ' + time);\n\n  return combined;\n};\n\nexport const separateDateandTime = date => {\n  const d = new Date(date);\n\n  var year = d.getFullYear();\n  var month = d.getMonth() + 1; // Jan is 0, dec is 11\n  var da = d.getDate();\n  var hours = d.getHours();\n  var minutes = d.getMinutes();\n  var day = '' + year + '-' + month + '-' + da;\n  var time = '' + hours + ': ' + minutes;\n\n  return { day, time };\n};\n\nexport const sortArray = arr => {\n  arr.sort(function (x, y) {\n    return x.updatedAt - y.updatedAt;\n  });\n};\n"],"sourceRoot":""}